<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>1024</width>
    <height>768</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>MainWindow</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <widget class="QWidget" name="verticalLayoutWidget_2">
    <property name="geometry">
     <rect>
      <x>180</x>
      <y>15</y>
      <width>671</width>
      <height>114</height>
     </rect>
    </property>
    <layout class="QVBoxLayout" name="verticalLayout_2">
     <item>
      <widget class="QLabel" name="challengeTitleLabel">
       <property name="font">
        <font>
         <family>Lucida Handwriting</family>
         <pointsize>20</pointsize>
         <weight>75</weight>
         <italic>false</italic>
         <bold>true</bold>
         <kerning>true</kerning>
        </font>
       </property>
       <property name="autoFillBackground">
        <bool>false</bool>
       </property>
       <property name="styleSheet">
        <string notr="true">QLabel {
	border: 2px solid;
	border-radius: 8px;
	background-color: #73d7ff;
}</string>
       </property>
       <property name="text">
        <string>Extension: Satellite Orbitting a Spherical Planet Info</string>
       </property>
       <property name="scaledContents">
        <bool>true</bool>
       </property>
       <property name="alignment">
        <set>Qt::AlignCenter</set>
       </property>
       <property name="wordWrap">
        <bool>true</bool>
       </property>
      </widget>
     </item>
    </layout>
   </widget>
   <widget class="QFrame" name="frame">
    <property name="geometry">
     <rect>
      <x>0</x>
      <y>0</y>
      <width>1024</width>
      <height>768</height>
     </rect>
    </property>
    <property name="styleSheet">
     <string notr="true">QFrame {
	background-color: #ccfcff
}</string>
    </property>
    <property name="frameShape">
     <enum>QFrame::StyledPanel</enum>
    </property>
    <property name="frameShadow">
     <enum>QFrame::Raised</enum>
    </property>
    <widget class="QPushButton" name="backButton">
     <property name="geometry">
      <rect>
       <x>30</x>
       <y>20</y>
       <width>131</width>
       <height>101</height>
      </rect>
     </property>
     <property name="font">
      <font>
       <family>Meiryo UI</family>
       <pointsize>24</pointsize>
      </font>
     </property>
     <property name="styleSheet">
      <string notr="true">QPushButton {
	border: 2px solid;
	border-radius: 8px;
	background-color: #a1e4ff;
}</string>
     </property>
     <property name="text">
      <string>Back</string>
     </property>
     <property name="checkable">
      <bool>true</bool>
     </property>
    </widget>
    <widget class="QLabel" name="label">
     <property name="geometry">
      <rect>
       <x>40</x>
       <y>140</y>
       <width>961</width>
       <height>591</height>
      </rect>
     </property>
     <property name="font">
      <font>
       <family>Meiryo UI</family>
       <pointsize>13</pointsize>
      </font>
     </property>
     <property name="text">
      <string>This 3D model considers the path of a satellite orbitting a spherical planet, ending in two scenarios: exceeding the set simulation time or the satellite colliding with the planet. (Code for calculating this path is accessible in the top-right.)

Utilising polar coordinates, we first draw the sphere: connecting single points together and turning these into XYZ coordinates through Cartesian conversion equations.

The path of the satellite involved solving for its movement components, the rotation about the planet, and a vertical movement (towards or away from the planet). This involves us increasing theta by the satellite's angular velocity (relative to the planet's centre) at each time step and updating the plot, each time using the satellite's new relative position.

Using Newton's law of gravitation, the satellite's acceleration towards to the planet is calculated at each time step and the satellite's speed is also updated. SUVAT equations can then be used to find the satellite's position, and it is checked whether the satellite has hit the planet. These position values are saved to arrays, and are then displayed.

The satellite's path begins with the lighter blue colour, and ends with the darker purple colour. Output information is rounded to 5 decimal places where necessary. Also note that this graph is interactive - try dragging the graph!</string>
     </property>
     <property name="wordWrap">
      <bool>true</bool>
     </property>
    </widget>
    <widget class="QPushButton" name="codeButton">
     <property name="geometry">
      <rect>
       <x>870</x>
       <y>20</y>
       <width>131</width>
       <height>101</height>
      </rect>
     </property>
     <property name="font">
      <font>
       <family>Meiryo UI</family>
       <pointsize>24</pointsize>
      </font>
     </property>
     <property name="styleSheet">
      <string notr="true">QPushButton {
	border: 2px solid;
	border-radius: 8px;
	background-color: #a1e4ff;
}</string>
     </property>
     <property name="text">
      <string>Code</string>
     </property>
     <property name="checkable">
      <bool>true</bool>
     </property>
    </widget>
   </widget>
   <zorder>frame</zorder>
   <zorder>verticalLayoutWidget_2</zorder>
  </widget>
  <widget class="QStatusBar" name="statusbar"/>
 </widget>
 <resources/>
 <connections/>
</ui>
