# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'challenge10_code.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1024, 768)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(180, 15, 811, 111))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.challengeTitleLabel = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        font = QtGui.QFont()
        font.setFamily("Lucida Handwriting")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setKerning(True)
        self.challengeTitleLabel.setFont(font)
        self.challengeTitleLabel.setAutoFillBackground(False)
        self.challengeTitleLabel.setStyleSheet("QLabel {\n"
"    border: 2px solid;\n"
"    border-radius: 8px;\n"
"    background-color: #73d7ff;\n"
"}")
        self.challengeTitleLabel.setScaledContents(True)
        self.challengeTitleLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.challengeTitleLabel.setWordWrap(True)
        self.challengeTitleLabel.setObjectName("challengeTitleLabel")
        self.verticalLayout_2.addWidget(self.challengeTitleLabel)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1024, 768))
        self.frame.setStyleSheet("QFrame {\n"
"    background-color: #ccfcff\n"
"}")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.backButton = QtWidgets.QPushButton(self.frame)
        self.backButton.setGeometry(QtCore.QRect(30, 20, 131, 101))
        font = QtGui.QFont()
        font.setFamily("Meiryo UI")
        font.setPointSize(24)
        self.backButton.setFont(font)
        self.backButton.setStyleSheet("QPushButton {\n"
"    border: 2px solid;\n"
"    border-radius: 8px;\n"
"    background-color: #a1e4ff;\n"
"}")
        self.backButton.setCheckable(True)
        self.backButton.setObjectName("backButton")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(40, 240, 491, 521))
        font = QtGui.QFont()
        font.setFamily("Meiryo UI")
        font.setPointSize(8)
        self.label.setFont(font)
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(530, 220, 491, 521))
        font = QtGui.QFont()
        font.setFamily("Meiryo UI")
        font.setPointSize(8)
        self.label_2.setFont(font)
        self.label_2.setWordWrap(True)
        self.label_2.setObjectName("label_2")
        self.line = QtWidgets.QFrame(self.frame)
        self.line.setGeometry(QtCore.QRect(490, 270, 3, 470))
        self.line.setStyleSheet("QFrame {background-color:  #838285; max-width: 1px; min-width:1px;}")
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(40, 140, 961, 101))
        font = QtGui.QFont()
        font.setFamily("Meiryo UI")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setWordWrap(True)
        self.label_3.setObjectName("label_3")
        self.frame.raise_()
        self.verticalLayoutWidget_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.challengeTitleLabel.setText(_translate("MainWindow", "Extension: Satellite Orbitting a Spherical Planet Calculation Code"))
        self.backButton.setText(_translate("MainWindow", "Back"))
        self.label.setText(_translate("MainWindow", "u /= 3.6                # convert from km/h to m/s\n"
"orbitTime *= 60         # convert from mins to s\n"
"orbitRadius *= 1000     # convert from km to m\n"
"planetMass *= (10**21)  # convert from standard form\n"
"planetRadius *= 1000    # convert from km to m\n"
"\n"
"# draw sphere\n"
"theta, phi = np.linspace(0, 2 * np.pi, 40), np.linspace(0, np.pi, 40)\n"
"THETA, PHI = np.meshgrid(theta, phi)\n"
"X = planetRadius * np.sin(THETA) * np.cos(PHI)\n"
"Y = planetRadius * np.sin(THETA) * np.sin(PHI)\n"
"Z = planetRadius * np.cos(THETA)\n"
"\n"
"# start of calculations\n"
"time = 0\n"
"orbitDistance = orbitRadius * 2 * math.pi\n"
"orbitSpeed = orbitDistance/orbitTime\n"
"turningSpeed = (step/(orbitDistance/orbitSpeed)) * 2 * math.pi\n"
"\n"
"theta = math.pi/2\n"
"phi = math.pi/2\n"
"XArray = []\n"
"YArray = []\n"
"ZArray = []\n"
"timeArray = []"))
        self.label_2.setText(_translate("MainWindow", "h = orbitRadius\n"
"crashed = False\n"
"\n"
"while time < simulationLength: \n"
"    G = 6.67430 * (10 ** -11)\n"
"    AccelerationH = -1 * ((G * planetMass) / (h**2))\n"
"    h += u * step + 0.5 * AccelerationH * step**2\n"
"    u += AccelerationH * step\n"
"    \n"
"    turningSpeed = (step/((h * 2 * math.pi)/orbitSpeed)) * 2 * math.pi\n"
"    theta += turningSpeed\n"
"\n"
"    if h < planetRadius:   # satellite crashed into Earth\n"
"        crashed = True\n"
"        break\n"
"    \n"
"    XArray.append(h * math.sin(theta) * math.cos(phi))\n"
"    YArray.append(h * math.sin(theta) * math.sin(phi))\n"
"    ZArray.append(h * math.cos(theta))\n"
"    \n"
"    timeArray.append(time)\n"
"    time += step"))
        self.label_3.setText(_translate("MainWindow", "Below are the calculations for this extension in Python 3.12, with \"np\" being the numpy library. (The line beginning \"h = orbitRadius\" continues from after the line \"TimeArray = []\".)\n"
"\n"
"\"u\" is the launch speed and \"step\" is the timestep."))
